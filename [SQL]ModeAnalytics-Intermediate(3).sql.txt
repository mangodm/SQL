


— ;

-- SQL aggregate functions

SELECT *
  FROM tutorial.aapl_historical_stock_price
  
-- COUNT: counts how many rows are in a particular column
-- SUM: adds together all the values in a particular column
-- MIN / MAX: returns the lowest and highest values in a particular column
-- AVG: calculates the average of a group of selected values

;

-- 1) COUNT

-- counting all rows (*)

SELECT COUNT(*) -- COUNT(1)과 같은 기능을 가지고 있음.
  FROM tutorial.aapl_historical_stock_price
  
;

-- counting individual columns

SELECT COUNT(high) -- provide a count of all of rows in which the high column is not null
  FROM tutorial.aapl_historical_stock_price

;

-- counting non-numerical columns

SELECT COUNT(date) -- simply counts the total number of non-null rows ; not the distinct values
  FROM tutorial.aapl_historical_stock_price

;

-- add column names using aliases

SELECT COUNT(date) AS count_of_date
  FROM tutorial.aapl_historical_stock_price
  
;

-- To use spaces, need to use double quotes

SELECT COUNT(date) AS "Count Of Date"
  FROM tutorial.aapl_historical_stock_price
  
;

-- 2) SUM

-- aggregators only aggregate vertically; null은 0으로 취급하고 계산을 함.

SELECT SUM(volume)
  FROM tutorial.aapl_historical_stock_price
  
;

-- 3) MIN / MAX

SELECT MIN(volume) AS min_volume, --  min: lowest number, the earliest date, or non-numerical value as close alphabetically to "A" as possible
  MAX(volume) AS max_volume
  FROM tutorial.aapl_historical_stock_price
  
;

-- 4) AVG

SELECT AVG(high)
  FROM tutorial.aapl_historical_stock_price
  WHERE high IS NOT NULL
  
;

SELECT AVG(high)
  FROM tutorial.aapl_historical_stock_price

;

-- 5) GROUP BY: to separate data into groups, which can be aggregated independently of one another;

SELECT year, -- 연도별 count
  COUNT(*) AS count
  FROM tutorial.aapl_historical_stock_price
  GROUP BY year
  
;

SELECT year,
  month, COUNT(*) AS count
  FROM tutorial.aapl_historical_stock_price
  GROUP BY year, month

;

-- 6) HAVING: GROUP BY 이후에 조건을 명시할 때 사용됨.

SELECT year, month, MAX(high) AS month_high -- high의 MAX을 계산
  FROM tutorial.aapl_historical_stock_price -- t- 테이블에서
  GROUP BY year, month -- year, month로 묶어서
  HAVING MAX(high) > 400 -- MAX(high) 컬럼의 값이 400보다 큰 행만 걸러내고,
  ORDER BY year, month -- year, month로 정렬
  
  
-- 쿼리문 작성 순서
-- 1) SELECT 2) FROM 3) WHERE 4) GROUP BY 5) HAVING 6) ORDER BY

;

-- 7) DISTINCT: 특정 컬럼에 포함된 고유값만 걸러낼 수 있음.

SELECT DISTINCT month 
  FROM tutorial.aapl_historical_stock_price

;

SELECT DISTINCT year, month -- 두 컬럼을 연결지어서 유니크한 값만 반환함.
  FROM tutorial.aapl_historical_stock_price
  
  
;

-- 집계할 때, DISTINCT를 활용할 수 있음. 

SELECT COUNT(DISTINCT month) AS unique_months
  FROM tutorial.aapl_historical_stock_price


;

SELECT month, AVG(volume) AS avg_trade_volume
  FROM tutorial.aapl_historical_stock_price
  GROUP BY month
  ORDER BY 2 desc

;

-- 8) CASE: if/then logic을 처리하는 구문

SELECT player_name,
  year, CASE when year = 'SR' THEN 'yes'
    ELSE NULL END AS is_a_senior
    FROM benn.college_football_players

;

-- adding multiple conditions to a CASE statement

SELECT player_name,
  weight,
  CASE WHEN weight > 250 THEN 'over 250'
  WHEN weight > 200 THEN '201-250' -- 최대한 다른 조건끼리 배타적으로 걸어주는 게 좋음.
  WHEN weight > 175 THEN '176-200'
  ELSE '175 or under' END AS weight_group
  FROM benn.college_football_players

;

-- 조건 여러 개 거는 경우

SELECT player_name,
  CASE WHEN year = 'FR' AND position = 'WR' THEN 'frosh_wr'
  ELSE NULL END AS sample_case_statement
  FROM benn.college_football_players
  
;

-- CASE와 집계 함수를 같이 쓰는 방법

SELECT CASE WHEN year = 'FR' THEN 'FR'
  ELSE 'Not FR' END AS year_group,
  COUNT(1) AS count
  FROM benn.college_football_players
  GROUP BY CASE WHEN year = 'FR' THEN 'FR'
  ELSE 'Not FR' END